// <auto-generated />
using System;
using CalendarReminder.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CalendarReminder.Infrastructure.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    partial class CalendarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CalendarReminder.Domain.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CalendarEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.CalendarEvent", b =>
                {
                    b.HasOne("CalendarReminder.Domain.Entities.User", "CreatedBy")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("CalendarReminder.Domain.Entities.CalendarEvent", "CalendarEvent")
                        .WithMany("Reminders")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.User", b =>
                {
                    b.HasOne("CalendarReminder.Domain.Entities.CalendarEvent", null)
                        .WithMany("Users")
                        .HasForeignKey("CalendarEventId");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.CalendarEvent", b =>
                {
                    b.Navigation("Reminders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CalendarReminder.Domain.Entities.User", b =>
                {
                    b.Navigation("CalendarEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
